docker-defaults: &docker-defaults
  docker:
    - image: quay.io/nyulibraries/circleci_docker:20.10.6-dc-1.29.1-0
      environment:
        - IMAGE_NAME=illiad-templates
        - COMPOSE_PROJECT_NAME=illiad-templates
  working_directory: ~/app

build_docker: &build_docker
  run:
    name: Build Docker
    command: |
      export BRANCH_NO_SLASH=${CIRCLE_BRANCH//\//_}
      docker-compose -f docker-compose.build.yml build

auth_quay: &auth_quay
  run:
    name: Authenticate Quay 
    command: |
      docker login -u "$QUAY_USERNAME" --password "$QUAY_PASSWORD" quay.io

pull_docker: &pull_docker
  run:
    name: Pull Docker
    command: |
      export BRANCH_NO_SLASH=${CIRCLE_BRANCH//\//_}
      docker pull quay.io/nyulibraries/${IMAGE_NAME}:${BRANCH_NO_SLASH} || docker pull quay.io/nyulibraries/${IMAGE_NAME}:latest

push_docker: &push_docker
  run:
    name: Push Docker
    command: |
      export BRANCH_NO_SLASH=${CIRCLE_BRANCH//\//_}
      docker push quay.io/nyulibraries/${IMAGE_NAME}:latest
      docker push quay.io/nyulibraries/${IMAGE_NAME}:${BRANCH_NO_SLASH}
      docker push quay.io/nyulibraries/${IMAGE_NAME}:${BRANCH_NO_SLASH}-${CIRCLE_SHA1}

hermes_deploy: &hermes_deploy
  run:
    name: Deploy via Hermes
    command: |
      export TAG=${CIRCLE_BRANCH//\//_}-${CIRCLE_SHA1}
      docker run -e HERMES_HOST -e HERMES_SECRET quay.io/nyulibraries/hermesclient:master createJob -job=illiad-templates -tag=$TAG
      # docker run -e HERMES_HOST -e HERMES_SECRET -e HERMES_WAIT_TIMEOUT=6m quay.io/nyulibraries/hermesclient:master jobStatus -job=illiad-templates
      timeout 1m sh -c 'until docker run -e HERMES_HOST -e HERMES_SECRET quay.io/nyulibraries/hermesclient:master jobStatus -job=illiad-templates -wait=false; do sleep 5; done'

compile: &compile
  run:
    name: Compile and copy CSS and JS assets 
    command: |
      docker-compose run compile
      docker cp `docker ps -a --filter "name=illiad-templates_compile_run_" --format "{{.Names}}"`:/app/dist .

s3_deploy: &s3_deploy
  aws-s3/sync:
    from: dist
    to: '${S3_URI}/illiad'
    aws-access-key-id: WEB_CDN_AWS_ACCESS_KEY_ID
    aws-secret-access-key: WEB_CDN_AWS_SECRET_ACCESS_KEY
    arguments: |
      --exclude "*" \
      --include "javascripts/illiad.js" \
      --include "stylesheets/illiad.css" \
      --delete
    overwrite: true

version: 2.1
orbs:
  aws-s3: circleci/aws-s3@1.0.11
jobs:
  build-image-dev:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - <<: *auth_quay
      - <<: *pull_docker
      - <<: *build_docker
      - <<: *push_docker
      - <<: *compile
      - <<: *s3_deploy
  
  build-image-prod:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - <<: *auth_quay
      - <<: *pull_docker
      - <<: *build_docker
      - <<: *push_docker
      - <<: *compile
      - <<: *s3_deploy

  deploy-dev:
    <<: *docker-defaults
    steps:
      - setup_remote_docker
      - <<: *auth_quay
      - run:
          name: Export Hermes Dev env vars
          command: |
            echo 'export HERMES_HOST=https://hermes-dev.library.nyu.edu' >> $BASH_ENV
            echo 'export HERMES_SECRET=$HERMES_SECRET_DEV' >> $BASH_ENV
      - <<: *hermes_deploy

  deploy-prod:
    <<: *docker-defaults
    steps:
      - setup_remote_docker
      - <<: *auth_quay
      - run:
          name: Export Hermes Prod env vars
          command: |
            echo 'export HERMES_HOST=https://hermes.library.nyu.edu' >> $BASH_ENV
            echo 'export HERMES_SECRET=$HERMES_SECRET_PROD' >> $BASH_ENV
      - <<: *hermes_deploy

workflows:
  version: 2.1
  deploy:
    jobs:
      - build-image-dev:
          context: web-cdn-aws-nyulitsdev
          filters:
            branches:
              ignore:
                - master
      - build-image-prod:
          context: web-cdn-aws-nyulits
          filters:
            branches:
              only:
                - master
      - deploy-dev:
          requires:
            - build-image-dev
          filters:
            branches:
              ignore:
                - master
      - deploy-prod:
          requires:
            - build-image-prod
          filters:
            branches:
              only:
                - master
